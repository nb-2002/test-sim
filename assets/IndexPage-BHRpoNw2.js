import{d as f,r as c,o as d,a as g,c as k,b as l,n as h,e as x,f as v}from"./index-CTSKLCWC.js";class w{sensorCoord=[[22,25],[27,25],[73,25],[78,25]];sensorSensed=[!1,!1,!1,!1];operation=[[[!1,!0,!0,!1],[!0,!0,!1,!1],[!0,!1,!1,!1],[!1,!0,!1,!1],[!1,!0,!0,!0]],[[!1,!0,!0,!1],[!1,!1,!0,!0],[!1,!1,!1,!0],[!1,!1,!0,!1],[!0,!0,!0,!1]]];objectRect=[[0,0],[100,0],[100,50],[0,50]];buttonClicked=!1;isPlaced=!1;runButtonClicked=!1;constructor(s,t){s&&(this.sensorCoord=s),t&&(this.operation=t)}drawObject(s){if(s.context&&this.isPlaced){s.context.save(),s.context.beginPath(),s.context.strokeStyle="#505050",s.context.lineWidth=2;for(const[t,e]of this.objectRect.entries())t==0?s.context.moveTo(e[0],e[1]):s.context.lineTo(e[0],e[1]),t==3&&s.context.lineTo(this.objectRect[0][0],this.objectRect[0][1]);s.context.stroke(),s.context.closePath(),s.context.beginPath(),s.context.fillStyle="#11aa11";for(const t of[this.objectRect])s.context.arc((t[1][0]+t[0][0])/2,(t[1][1]+t[0][1])/2,4,0,Math.PI*2);s.context.fill(),s.context.closePath(),s.context.beginPath(),s.context.fillStyle="#1111aa";for(const t of this.sensorCoord)s.context.arc(t[0],t[1],2,0,Math.PI*2),s.context.fill();s.context.closePath(),s.context.restore()}}buttonClick(s){this.buttonClicked=!this.buttonClicked,this.runButtonClicked=!1,s.isMoveButtonClicked=!1,s.isDrawButtonClicked=!1,this.isPlaced||(this.isPlaced=!0,this.translate(10,40),s.draw())}runButtonClick(s){this.runButtonClicked=!this.runButtonClicked,this.runButtonClicked&&this.run(s)}move(s,t){const e=[[0,-1],[1,0],[0,1],[-1,0],[0,-10],[10,0],[0,10],[-10,0],[0,-100],[100,0],[0,100],[-100,0]];for(const[o,n]of["ArrowUp","ArrowRight","ArrowDown","ArrowLeft","w","d","s","a","W","D","S","A"].entries())n==s.key&&this.translate(e[o][0],e[o][1]);const i=[-1,1,-10,10];for(const[o,n]of[",",".","<",">"].entries())n==s.key&&this.rotate(i[o]);t.draw()}run(s){const t=setInterval(()=>{this.check(s),console.log(this.sensorSensed),this.left(),this.right(),s.draw(),(!(this.sensorSensed[0]||this.sensorSensed[1]||this.sensorSensed[2]||this.sensorSensed[3])||!this.runButtonClicked)&&clearInterval(t)},100)}check(s){for(const[t,e]of this.sensorCoord.entries()){const i=s.context.getImageData(e[0],e[1],1,1);console.log(i),(i.data[0]==16||i.data[0]==17)&&(i.data[1]==16||i.data[1]==17)&&(i.data[2]==16||i.data[2]==17)?this.sensorSensed[t]=!0:this.sensorSensed[t]=!1}}left(){let s=!1;for(const t of this.operation[0]){let e=0;for(const[i,o]of t.entries())o==this.sensorSensed[i]&&e++;if(e==4){s=!0;break}}s&&this.rotate(-1)}right(){let s=!1;for(const t of this.operation[1]){let e=0;for(const[i,o]of t.entries())o==this.sensorSensed[i]&&e++;if(e==4){s=!0;break}}s&&this.rotate(1)}translate(s,t){for(const e of this.objectRect)e[0]+=s,e[1]+=t;for(const e of this.sensorCoord)e[0]+=s,e[1]+=t}rotate(s){const t=s*Math.PI/180;for(const e of[this.objectRect]){const i=s>0?[(e[1][0]+e[2][0])/2,(e[1][1]+e[2][1])/2]:[(e[0][0]+e[3][0])/2,(e[0][1]+e[3][1])/2];for(const[o,n]of e.entries()){const a=[n[0]-i[0],n[1]-i[1]];e[o]=[i[0]+a[0]*Math.cos(t)-a[1]*Math.sin(t),i[1]+a[0]*Math.sin(t)+a[1]*Math.cos(t)]}for(const[o,n]of this.sensorCoord.entries()){const a=[n[0]-i[0],n[1]-i[1]];this.sensorCoord[o]=[i[0]+a[0]*Math.cos(t)-a[1]*Math.sin(t),i[1]+a[0]*Math.sin(t)+a[1]*Math.cos(t)]}}}}class u{canvas=null;context=null;scale=1;originX=0;originY=0;isDragging=!1;lastX=0;lastY=0;isMoveButtonClicked=!1;isDrawButtonClicked=!1;isTrackPointDragged=!1;arrayTrackPoints=[[[]]];atpi=0;object=new w(null,null);constructor(s){this.canvas=s}resizeCanvas(){this.canvas&&(this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.draw())}onWheel(s){s.preventDefault();const t=s.deltaY<0?1.1:.9;this.scale*=t;const e=s.clientX,i=s.clientY;this.originX=e-(e-this.originX)*t,this.originY=i-(i-this.originY)*t,this.draw()}onMouseDown(s){if(this.isDragging=!0,this.lastX=s.clientX,this.lastY=s.clientY,this.isDrawButtonClicked){const t=(this.lastX-this.originX)/this.scale,e=(this.lastY-this.originY)/this.scale;this.atpi==0?(this.arrayTrackPoints.length==0?this.arrayTrackPoints.push([[t,e]]):(this.arrayTrackPoints[0][0].push(t),this.arrayTrackPoints[0][0].push(e)),this.atpi++):(this.arrayTrackPoints[this.atpi-1].length<=2&&this.arrayTrackPoints[this.atpi-1].push([t,e]),this.arrayTrackPoints.push([[t,e]]),this.atpi++),this.draw()}}onMouseMove(s){if(this.isDragging&&this.isMoveButtonClicked){const t=s.clientX-this.lastX,e=s.clientY-this.lastY;this.originX+=t,this.originY+=e,this.lastX=s.clientX,this.lastY=s.clientY,this.draw()}this.isDragging&&this.isDrawButtonClicked&&(this.isTrackPointDragged=!0,this.lastX=s.clientX,this.lastY=s.clientY,this.draw())}onMouseUp(){this.isDragging=!1,this.isTrackPointDragged&&this.arrayTrackPoints[this.atpi-1].push([(this.lastX-this.originX)/this.scale,(this.lastY-this.originY)/this.scale]),this.isTrackPointDragged=!1}draw(){this.canvas&&(this.context=this.canvas.getContext("2d",{willReadFrequently:!0}))&&(this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.save(),this.context.translate(this.originX,this.originY),this.context.scale(this.scale,this.scale),this.drawGrid(),this.drawAxis(),this.object.drawObject(this),this.drawTrack(),this.context.restore())}drawGrid(){if(this.context){const s=50*this.scale;this.context.strokeStyle="#ccc",this.context.lineWidth=this.scale>5?1:this.scale<.2?4:2;for(let t=(Math.floor(-this.originX/s)*s-(Math.floor(this.canvas.width/50)%2?s/2:0))/this.scale;t<(this.canvas.width-this.originX)/this.scale;t+=s/this.scale)this.context.beginPath(),this.context.moveTo(t,-this.originY/this.scale),this.context.lineTo(t,(this.canvas.height-this.originY)/this.scale),this.context.stroke(),this.context.closePath();for(let t=(Math.floor(-this.originY/s)*s-(Math.floor(this.canvas.height/50)%2?s/2:0))/this.scale;t<(this.canvas.height-this.originY)/this.scale;t+=s/this.scale)this.context.beginPath(),this.context.moveTo(-this.originX/this.scale,t),this.context.lineTo((this.canvas.width-this.originX)/this.scale,t),this.context.stroke(),this.context.closePath()}}drawAxis(){this.context&&(this.context.strokeStyle="#a0a0a0",this.context.lineWidth=3,this.context.beginPath(),this.context.moveTo(Math.floor(this.canvas.width/50)/2*50,-this.originY/this.scale),this.context.lineTo(Math.floor(this.canvas.width/50)/2*50,(this.canvas.height-this.originY)/this.scale),this.context.moveTo(-this.originX/this.scale,Math.floor(this.canvas.height/50)/2*50),this.context.lineTo((this.canvas.width-this.originX)/this.scale,Math.floor(this.canvas.height/50)/2*50),this.context.stroke(),this.context.closePath())}drawTrack(){if(this.context)for(const[s,t]of this.arrayTrackPoints.entries()){if(this.isTrackPointDragged&&s==this.atpi-1){this.context.beginPath(),this.context.arc((this.lastX-this.originX)/this.scale,(this.lastY-this.originY)/this.scale,5,0,Math.PI*2),this.context.fillStyle="#1111aa",this.context.fill(),this.context.closePath();continue}t.length==2?(this.context.strokeStyle="#111111",this.context.lineWidth=50,this.context.beginPath(),this.context.moveTo(t[0][0],t[0][1]),this.context.lineTo(t[1][0],t[1][1]),this.context.stroke(),this.context.closePath()):t.length==3&&(this.context.strokeStyle="#111111",this.context.lineWidth=50,this.context.beginPath(),this.context.moveTo(t[0][0],t[0][1]),this.context.quadraticCurveTo(t[1][0],t[1][1],t[2][0],t[2][1]),this.context.stroke(),this.context.closePath()),s>0&&s<this.atpi-1&&(this.context.beginPath(),this.context.arc(t[0][0],t[0][1],25,0,Math.PI*2),this.context.fillStyle="#111111",this.context.fill(),this.context.closePath())}}centerButton(){this.originX=0,this.originY=0,this.scale=1,this.draw()}moveButtonClick(){this.object.runButtonClicked=!1,this.object.buttonClicked=!1,this.isDrawButtonClicked=!1,this.isMoveButtonClicked=!this.isMoveButtonClicked}drawButtonClick(){this.object.runButtonClicked=!1,this.object.buttonClicked=!1,this.isMoveButtonClicked=!1,this.isDrawButtonClicked=!this.isDrawButtonClicked}undoButton(){this.atpi>0&&(console.log(this.atpi,this.arrayTrackPoints),this.arrayTrackPoints.pop(),this.atpi-=1,this.atpi>0&&this.arrayTrackPoints[this.atpi-1].pop(),this.draw())}}const b={class:"onCanvas"},C=f({__name:"IndexPage",setup(r){const s=c(null),t=c(new u(s.value));return d(()=>{s.value&&(t.value=new u(s.value),t.value.resizeCanvas(),window.canvas=t.value),window.addEventListener("resize",t.value.resizeCanvas),window.addEventListener("keydown",e=>{["ArrowUp","ArrowRight","ArrowDown","ArrowLeft"].includes(e.key)&&e.preventDefault()})}),g(()=>{delete window.canvas}),(e,i)=>(v(),k("div",{class:"canvas-container",onKeydown:i[11]||(i[11]=o=>t.value.object.move(o,t.value))},[l("div",b,[l("button",{class:"button",onClick:i[0]||(i[0]=(...o)=>t.value.centerButton&&t.value.centerButton(...o))}," center "),l("button",{class:h(["button buttons",{button_active:t.value?.isMoveButtonClicked}]),onClick:i[1]||(i[1]=o=>t.value.moveButtonClick())}," move ",2),l("button",{class:h(["button buttons",{button_active:t.value?.isDrawButtonClicked}]),onClick:i[2]||(i[2]=o=>t.value.drawButtonClick())}," draw ",2),l("button",{class:"button buttons",onClick:i[3]||(i[3]=(...o)=>t.value.undoButton&&t.value.undoButton(...o))}," undo "),l("button",{class:h(["button buttons",{button_active:t.value?.object.buttonClicked}]),onClick:i[4]||(i[4]=o=>t.value.object.buttonClick(t.value))}," object ",2),l("button",{class:h(["button buttons",{button_active:t.value?.object.runButtonClicked}]),style:x({display:t.value?.object.buttonClicked?"inline-block":"none"}),onClick:i[5]||(i[5]=o=>t.value.object.runButtonClick(t.value))}," run ",6)]),l("canvas",{onWheel:i[6]||(i[6]=(...o)=>t.value.onWheel&&t.value.onWheel(...o)),onMousedown:i[7]||(i[7]=(...o)=>t.value.onMouseDown&&t.value.onMouseDown(...o)),onMouseup:i[8]||(i[8]=(...o)=>t.value.onMouseUp&&t.value.onMouseUp(...o)),onMouseleave:i[9]||(i[9]=(...o)=>t.value.onMouseUp&&t.value.onMouseUp(...o)),onMousemove:i[10]||(i[10]=(...o)=>t.value.onMouseMove&&t.value.onMouseMove(...o)),ref_key:"refcanvas",ref:s},null,544)],32))}}),p=(r,s)=>{const t=r.__vccOpts||r;for(const[e,i]of s)t[e]=i;return t},M=p(C,[["__scopeId","data-v-ac7269e7"]]);export{M as default};
